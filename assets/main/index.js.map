{"version":3,"sources":["../../file:/G:/Projects/RideMaster/assets/scripts/file:/G:/Projects/RideMaster/assets/scripts/BoardController.ts","../../file:/G:/Projects/RideMaster/assets/scripts/file:/G:/Projects/RideMaster/assets/scripts/ButtonDownload.ts","../../file:/G:/Projects/RideMaster/assets/scripts/file:/G:/Projects/RideMaster/assets/scripts/CameraFollow.ts","../../file:/G:/Projects/RideMaster/assets/scripts/file:/G:/Projects/RideMaster/assets/scripts/CoinAnimationController.ts","../../file:/G:/Projects/RideMaster/assets/scripts/file:/G:/Projects/RideMaster/assets/scripts/CoinController.ts","../../file:/D:/CocosEditor/Creator/3.7.4/resources/resources/3d/engine/editor/assets/tools/file:/D:/CocosEditor/Creator/3.7.4/resources/resources/3d/engine/editor/assets/tools/debug-view-runtime-control.ts","../../file:/G:/Projects/RideMaster/assets/scripts/file:/G:/Projects/RideMaster/assets/scripts/DeviceChecker.ts","../../file:/G:/Projects/RideMaster/assets/scripts/file:/G:/Projects/RideMaster/assets/scripts/DeviceTypeGlobal.ts","../../file:/G:/Projects/RideMaster/assets/scripts/file:/G:/Projects/RideMaster/assets/scripts/EndGameController.ts","../../file:/G:/Projects/RideMaster/assets/scripts/file:/G:/Projects/RideMaster/assets/scripts/EndGameOverlayController.ts","../../file:/G:/Projects/RideMaster/assets/scripts/file:/G:/Projects/RideMaster/assets/scripts/Joystick.ts","../../file:/G:/Projects/RideMaster/assets/scripts/file:/G:/Projects/RideMaster/assets/scripts/MachineController.ts","../../file:/G:/Projects/RideMaster/assets/scripts/file:/G:/Projects/RideMaster/assets/scripts/MachineCrashController.ts","../../file:/G:/Projects/RideMaster/assets/scripts/file:/G:/Projects/RideMaster/assets/scripts/RotationController.ts","../../file:/G:/Projects/RideMaster/assets/scripts/file:/G:/Projects/RideMaster/assets/scripts/StartAnimationController.ts"],"names":["ccclass","_decorator","property","_dec","_dec2","Node","_descriptor","_applyDecoratedDescriptor","_class2","_Component","BoardController","_this","_len","arguments","length","args","Array","_key","call","apply","concat","_initializerDefineProperty","_assertThisInitialized","_descriptor2","_descriptor3","destructionDelay","isDestroyed","_inheritsLoose","_proto","prototype","onLoad","this","getComponent","Collider","on","onCollisionEnter","event","_this2","other","otherCollider","node","console","log","name","setTimeout","makeDynamic","fall","fallDelay","rigidBody","RigidBody","type","Type","DYNAMIC","_this3","applyForce","Vec3","gravityStrength","destroy","Component","configurable","enumerable","writable","initializer","_class","_RF","pop","Button","ButtonHandler","start","myButton","onButtonClick","url","Global","deviceType","window","open","_dec3","CameraFollow","_descriptor4","_descriptor5","isCameraFixed","machineCrashController","machineNode","MachineCrashController","updateCameraPosition","isBroken","setWorldPosition","worldPosition","targetNode","targetPos","getWorldPosition","desiredPosition","x","offsetX","y","offsetY","z","offsetZ","update","deltaTime","CoinAnimation","rotationSpeed","moveDistance","moveDuration","startTween","rotationQuat","Quat","fromEuler","rotate","originalPosition","position","clone","targetPosition","add","tween","to","union","repeatForever","CoinController","coinCountLabel","coinCountNode","Label","collider","SphereCollider","onTriggerEnter","addCoin","currentCount","parseInt","string","toString","_dec4","DebugViewRuntimeControl","_single","strSingle","strComposite","strMisc","compositeModeToggleList","singleModeToggleList","miscModeToggleList","textComponentList","labelComponentList","textContentList","hideButtonLabel","_currentColorIndex","strColor","color","Color","WHITE","BLACK","RED","GREEN","BLUE","parent","Canvas","uiTransform","UITransform","halfScreenWidth","width","halfScreenHeight","height","miscNode","getChildByName","buttonNode","instantiate","titleNode","i","newLabel","EnableAllCompositeModeButton","setPosition","setScale","labelComponent","overflow","currentRow","newNode","singleModeToggle","textComponent","getComponentInChildren","RichText","Toggle","EventType","TOGGLE","toggleSingleMode","CLICK","enableAllCompositeMode","changeColorButton","changeTextColor","HideButton","hideUI","compositeModeToggle","isChecked","toggleLightingWithAlbedo","toggleCSMColoration","toggleCompositeMode","error","isTextMatched","textUI","textDescription","tempText","String","findIndex","search","substr","toggle","debugView","director","root","singleMode","enableCompositeMode","lightingWithAlbedo","csmLayerColoration","button","toggleComponent","activeValue","active","DeviceChecker","checkDevice","sys","isNative","os","OS","IOS","ANDROID","GameController","hasGameEnded","gameEnd","overlay","button_Download","Animation","play","EndGameOverlay","overlayNode","_dec5","StartAnimationController","Joystick","_startPos","v2","_radius","_direction","_stickYValue","TOUCH_START","onTouchStart","TOUCH_MOVE","onTouchMove","TOUCH_END","onTouchEnd","TOUCH_CANCEL","getLocation","startAnimationController","setIsRunning","currentPos","subtract","normalize","Vec2","distance","multiplyScalar","newPosition","stick","getJoystickPercentage","machineCrashControllerNode","removeLeverUI","normalizedValue","percentageValue","Math","round","max","min","nodeToRemove","children","forEach","child","sprite","Sprite","currentColor","newColor","r","g","b","CCFloat","MachineController","speed","JoystickPercentage","joystick","movingForward","lastFrameTime","joystickNode","currentTime","performance","now","maxspeed","BoxCollider","startFalling","breakableNode","machineRigidBody","parentCollider","enabled","getComponents","childRigidBody","addComponent","isDynamic","mass","applyImpulse","RotateNode","rotateNode","actualRotationSpeed","rotationSpeedCoefficient","eulerAngles","rotationX","rotationY","rotationZ","animationComponentHand","animationComponentDraggable","isRunning","animationStopped","isLeverPositionChangePlaying","handNode","draggableNode","runAnimations","_runAnimations","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","playAnimation","Promise","all","stop","animationComponent","animationName","resolve","once","FINISHED","handleTouchStart","stopAnimationOnTouch","value"],"mappings":"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","file":"all.js","sourcesContent":["/*import { _decorator, Component, Collider, RigidBody, Vec3, ICollisionEvent, Node, BoxCollider } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('BoardController')\r\nexport class BoardController extends Component {\r\n    @property\r\n    public fallDelay: number = 0; // Задержка перед падением доски\r\n    @property\r\n    public gravityStrength: number = 0; // Скорость падения доски\r\n    @property(Node) // Добавляем свойство для ссылки на ноду\r\n    public targetNode: Node = null; // Нода, с которой будет происходить столкновение\r\n\r\n    private isFalling: boolean = false;\r\n    private destructionDelay = 1;\r\n\r\n    onLoad() {\r\n        const collider = this.getComponent(Collider);\r\n        collider.on('onCollisionEnter', this.onCollisionEnter, this);\r\n    }\r\n\r\n    onCollisionEnter(event: ICollisionEvent) {\r\n        const other = event.otherCollider.node;\r\n        console.log(`Collision with: ${other.name}`);\r\n        // Проверяем, совпадает ли нода с целевой нодой\r\n        if (other === this.targetNode && !this.isFalling) {\r\n            this.isFalling = true;\r\n            this.scheduleOnce(() => {\r\n                this.makeDynamic();\r\n                this.fall();\r\n            }, this.fallDelay);\r\n        }\r\n    }\r\n\r\n    makeDynamic() {\r\n        const rigidBody = this.getComponent(RigidBody);\r\n        if (rigidBody) {\r\n            rigidBody.type = RigidBody.Type.DYNAMIC;\r\n        }\r\n    }\r\n\r\n    fall() {\r\n        const rigidBody = this.getComponent(RigidBody);\r\n        if (rigidBody) {\r\n            rigidBody.applyForce(new Vec3(0, this.gravityStrength, 0)); // чем больше, тем быстрее падает\r\n        }\r\n        \r\n        this.scheduleOnce(() => {\r\n            this.node.destroy();\r\n        }, this.destructionDelay);\r\n    }\r\n}*/\r\n////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\nimport { _decorator, Component, Collider, RigidBody, Vec3, ICollisionEvent, Node } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n    \r\n@ccclass('BoardController')\r\nexport class BoardController extends Component {\r\n    @property\r\n    public fallDelay: number = 0; // Задержка перед падением доски\r\n    @property\r\n    public gravityStrength: number = 0; // Скорость падения доски\r\n    @property(Node) // Добавляем свойство для ссылки на ноду\r\n    public targetNode: Node = null; // Нода, с которой будет происходить столкновение\r\n    \r\n    private destructionDelay = 1;\r\n    private isDestroyed = false; // Флаг для отслеживания состояния ноды\r\n    \r\n     onLoad() {\r\n        const collider = this.getComponent(Collider);\r\n        collider.on('onCollisionEnter', this.onCollisionEnter, this);\r\n    }\r\n    \r\n    onCollisionEnter(event: ICollisionEvent) {\r\n        if (this.isDestroyed) return; // Проверка, была ли нода уничтожена\r\n    \r\n        const other = event.otherCollider.node;\r\n        console.log(`Collision with: ${other.name}`);\r\n\r\n        setTimeout(() => {\r\n            if (this.isDestroyed) return; // Дополнительная проверка перед вызовом методов\r\n                this.makeDynamic();\r\n                this.fall();\r\n            }, this.fallDelay * 1000);\r\n        }\r\n    \r\n        makeDynamic() {\r\n            const rigidBody = this.getComponent(RigidBody);\r\n            if (rigidBody) {\r\n                rigidBody.type = RigidBody.Type.DYNAMIC;\r\n            }\r\n        }\r\n    \r\n        fall() {\r\n            const rigidBody = this.getComponent(RigidBody);\r\n            if (rigidBody) {\r\n                rigidBody.applyForce(new Vec3(0, this.gravityStrength, 0)); // чем больше, тем быстрее падает\r\n            }\r\n    \r\n            this.isDestroyed = true; // Устанавливаем флаг перед уничтожением\r\n            \r\n            setTimeout(() => {\r\n                this.node.destroy();\r\n            }, this.destructionDelay * 1000);\r\n        }\r\n    }   ","import { _decorator, Component, Button, sys } from 'cc';\r\nimport { Global } from './DeviceTypeGlobal';\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('ButtonHandler')\r\nexport default class ButtonHandler extends Component {\r\n    @property(Button)\r\n    myButton: Button = null;\r\n\r\n    start() {\r\n        this.myButton.node.on('click', this.onButtonClick, this);\r\n    }\r\n\r\n    onButtonClick() {\r\n        let url = '';\r\n\r\n        switch (Global.deviceType) {\r\n            case \"iOS\":\r\n                url = \"https://apps.apple.com/us/app/ride-master-car-builder-game/id6449224139\"; \r\n                break;\r\n            case \"Android\":\r\n                url = \"https://play.google.com/store/apps/details?id=com.LuB.DeliveryConstruct&hl=en\"; \r\n                break;\r\n            case \"Web\":\r\n                url = \"https://play.google.com/store/apps/details?id=com.LuB.DeliveryConstruct&hl=en\"; \r\n                break;\r\n            default:\r\n                url = \"https://play.google.com/store/apps/details?id=com.LuB.DeliveryConstruct&hl=en\"; \r\n                break;\r\n        }\r\n\r\n        window.open(url, '_blank');\r\n    }\r\n}\r\n\r\n","import { _decorator, Component, Node, Vec3 } from 'cc';\r\nimport { MachineCrashController } from './MachineCrashController'; // Импортируем класс MachineCrashController\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('CameraFollow')\r\nexport class CameraFollow extends Component {\r\n    @property(Node)\r\n    public targetNode: Node = null; // Публичная переменная для хранения целевой ноды\r\n\r\n    @property(Node)\r\n    public machineNode: Node = null; // Нода машины, передаваемая извне\r\n\r\n    @property\r\n    public offsetX: number = -10; // Фиксированное смещение по оси X\r\n\r\n    @property\r\n    public offsetY: number = 15; // Фиксированное смещение по оси Y\r\n\r\n    @property\r\n    public offsetZ: number = 30; // Фиксированное смещение по оси Z\r\n\r\n    private isCameraFixed: boolean = false; // Флаг для отслеживания состояния камеры\r\n    private machineCrashController: MachineCrashController = null; // Ссылка на контроллер аварии машины\r\n\r\n    start() {\r\n        // Получаем ссылку на MachineCrashController из ноды машины\r\n        if (this.machineNode) {\r\n            this.machineCrashController = this.machineNode.getComponent(MachineCrashController);\r\n        }\r\n    }\r\n\r\n    private updateCameraPosition(): void {\r\n        if (this.machineCrashController && this.machineCrashController.isBroken) {\r\n            if (!this.isCameraFixed) {\r\n                // Если камера еще не зафиксирована, фиксируем ее положение\r\n                this.isCameraFixed = true;\r\n                // Устанавливаем фиксированную позицию камеры\r\n                this.node.setWorldPosition(this.node.worldPosition); // Сохраняем текущее положение камеры\r\n            }\r\n        } else {\r\n            // Если машина не сломана, продолжаем следовать за целевой нодой\r\n            if (this.targetNode) {\r\n                // Получаем мировую позицию целевого объекта\r\n                let targetPos = new Vec3();\r\n                this.targetNode.getWorldPosition(targetPos);\r\n\r\n                // Определяем желаемую позицию камеры с фиксированными смещениями\r\n                let desiredPosition = new Vec3(\r\n                    targetPos.x + this.offsetX,\r\n                    targetPos.y + this.offsetY,\r\n                    targetPos.z + this.offsetZ\r\n                );\r\n\r\n                // Устанавливаем новую позицию камеры\r\n                this.node.setWorldPosition(desiredPosition);\r\n                this.isCameraFixed = false; // Сбрасываем флаг, так как камера не зафиксирована\r\n            }\r\n        }\r\n    }\r\n\r\n    update(deltaTime: number) {\r\n        this.updateCameraPosition();\r\n    }\r\n}","import { _decorator, Component, Node, tween, Vec3, Quat } from 'cc';\r\n\r\nconst { ccclass } = _decorator;\r\n\r\n@ccclass('CoinAnimation')\r\nexport class CoinAnimation extends Component {\r\n    private rotationSpeed: number = 180; // Скорость вращения в градусах в секунду\r\n    private moveDistance: number = 0.5; // Расстояние перемещения вверх и вниз\r\n    private moveDuration: number = 1; // Длительность перемещения\r\n\r\n    start() {\r\n        this.startTween();\r\n    }\r\n\r\n    update(deltaTime: number) {\r\n        // Вращаем монету вокруг своей оси\r\n        const rotationQuat = new Quat();\r\n        Quat.fromEuler(rotationQuat, 0, this.rotationSpeed * deltaTime, 0);\r\n        this.node.rotate(rotationQuat);\r\n    }\r\n\r\n    private startTween() {\r\n        const originalPosition = this.node.position.clone();\r\n        const targetPosition = originalPosition.clone().add(new Vec3(0, this.moveDistance, 0));\r\n\r\n        // Перемещение вверх\r\n        tween(this.node)\r\n            .to(this.moveDuration, { position: targetPosition })\r\n            .to(this.moveDuration, { position: originalPosition })\r\n            .union() // Объединяем анимации\r\n            .repeatForever() // Повторяем анимацию бесконечно\r\n            .start();\r\n    }\r\n}","import { _decorator, Component, Node, ITriggerEvent, Label, SphereCollider } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('CoinController')\r\nexport class CoinController extends Component {\r\n    @property(Node)\r\n    coinCountNode: Node = null; // Нода для отображения счётчика монет\r\n\r\n    @property(Node)\r\n    machineNode: Node = null; // Нода для объекта Machine\r\n\r\n    private coinCountLabel: Label | null = null; // Переменная для хранения ссылки на Label\r\n\r\n    onLoad() {\r\n        // Получаем компонент Label из ноды coinCountNode\r\n        this.coinCountLabel = this.coinCountNode.getComponent(Label);\r\n    }\r\n\r\n    start() {\r\n        // Подписываемся на событие onTriggerEnter\r\n        const collider = this.node.getComponent(SphereCollider);\r\n        if (collider) {\r\n            collider.on('onTriggerEnter', this.onTriggerEnter, this);\r\n        }\r\n    }\r\n\r\n    onTriggerEnter(event: ITriggerEvent) {\r\n        const otherCollider = event.otherCollider;\r\n\r\n        // Проверяем, что столкновение произошло с объектом Machine\r\n        if (otherCollider.node === this.machineNode) {\r\n            this.addCoin();\r\n            this.node.destroy(); // Удаляем монету после сбора\r\n        }\r\n    }\r\n\r\n    private addCoin() {\r\n        // Увеличиваем счёт на 1\r\n        if (this.coinCountLabel) {\r\n            let currentCount = parseInt(this.coinCountLabel.string) || 0; // Обрабатываем случай, если строка пустая\r\n            this.coinCountLabel.string = (currentCount + 1).toString();\r\n        }\r\n    }\r\n}","import { Color, Canvas, UITransform, instantiate, math, Toggle, TextureCube, _decorator, Component, Button, labelAssembler, game, director, Node, Scene, renderer, CameraComponent, Label, ForwardPipeline, RichText } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('internal.DebugViewRuntimeControl')\r\nexport class DebugViewRuntimeControl extends Component {\r\n    @property(Node)\r\n    compositeModeToggle: Node | null = null;\r\n    @property(Node)\r\n    singleModeToggle: Node | null = null;\r\n    @property(Node)\r\n    EnableAllCompositeModeButton: Node | null = null;\r\n\t_single: number = 0;\r\n\r\n    private strSingle: string[] = [\r\n        'No Single Debug',\r\n        'Vertex Color',\r\n        'Vertex Normal',\r\n        'Vertex Tangent',\r\n        'World Position',\r\n        'Vertex Mirror',\r\n        'Face Side',\r\n        'UV0',\r\n        'UV1',\r\n        'UV Lightmap',\r\n        'Project Depth',\r\n        'Linear Depth',\r\n\r\n        'Fragment Normal',\r\n        'Fragment Tangent',\r\n        'Fragment Binormal',\r\n        'Base Color',\r\n        'Diffuse Color',\r\n        'Specular Color',\r\n        'Transparency',\r\n        'Metallic',\r\n        'Roughness',\r\n        'Specular Intensity',\r\n        'IOR',\r\n\r\n        'Direct Diffuse',\r\n        'Direct Specular',\r\n        'Direct All',\r\n        'Env Diffuse',\r\n        'Env Specular',\r\n        'Env All',\r\n        'Emissive',\r\n        'Light Map',\r\n        'Shadow',\r\n        'AO',\r\n\r\n        'Fresnel',\r\n        'Direct Transmit Diffuse',\r\n        'Direct Transmit Specular',\r\n        'Env Transmit Diffuse',\r\n        'Env Transmit Specular',\r\n        'Transmit All',\r\n        'Direct Internal Specular',\r\n        'Env Internal Specular',\r\n        'Internal All',\r\n\r\n        'Fog',\r\n    ];\r\n    private strComposite: string[] = [\r\n        'Direct Diffuse',\r\n        'Direct Specular',\r\n        'Env Diffuse',\r\n        'Env Specular',\r\n        'Emissive',\r\n        'Light Map',\r\n        'Shadow',\r\n        'AO',\r\n\r\n        'Normal Map',\r\n        'Fog',\r\n\r\n        'Tone Mapping',\r\n        'Gamma Correction',\r\n\r\n        'Fresnel',\r\n        'Transmit Diffuse',\r\n        'Transmit Specular',\r\n        'Internal Specular',\r\n        'TT',\r\n    ];\r\n    private strMisc: string[] = [\r\n        'CSM Layer Coloration',\r\n        'Lighting With Albedo',\r\n    ];\r\n\r\n    private compositeModeToggleList: Node[] = [];\r\n    private singleModeToggleList: Node[] = [];\r\n    private miscModeToggleList: Node[] = [];\r\n    private textComponentList: RichText[] = [];\r\n    private labelComponentList: Label[] = [];\r\n    private textContentList: string[] = [];\r\n    private hideButtonLabel: Label;\r\n    start() {\r\n        // get canvas resolution\r\n        const canvas = this.node.parent.getComponent(Canvas);\r\n        if (!canvas) {\r\n            console.error('debug-view-runtime-control should be child of Canvas');\r\n            return;\r\n        }\r\n\r\n        const uiTransform = this.node.parent.getComponent(UITransform);\r\n        const halfScreenWidth = uiTransform.width * 0.5;\r\n        const halfScreenHeight = uiTransform.height * 0.5;\r\n\r\n        let x = -halfScreenWidth + halfScreenWidth * 0.1, y = halfScreenHeight - halfScreenHeight * 0.1;\r\n        const width = 200, height = 20;\r\n\r\n        // new nodes\r\n        const miscNode = this.node.getChildByName('MiscMode');\r\n        const buttonNode = instantiate(miscNode);\r\n        buttonNode.parent = this.node;\r\n        buttonNode.name = 'Buttons';\r\n        const titleNode = instantiate(miscNode);\r\n        titleNode.parent = this.node;\r\n        titleNode.name = 'Titles';\r\n\r\n        // title\r\n        for (let i = 0; i < 2; i++) {\r\n            const newLabel = instantiate(this.EnableAllCompositeModeButton.getChildByName('Label'));\r\n            newLabel.setPosition(x + (i > 0 ? 50 + width * 2 : 150), y, 0.0);\r\n            newLabel.setScale(0.75, 0.75, 0.75);\r\n            newLabel.parent = titleNode;\r\n            const labelComponent = newLabel.getComponent(Label);\r\n            labelComponent.string = i ? '----------Composite Mode----------' : '----------Single Mode----------';\r\n            labelComponent.color = Color.WHITE;\r\n            labelComponent.overflow = 0;\r\n            this.labelComponentList[this.labelComponentList.length] = labelComponent;\r\n        }\r\n\r\n        y -= height;\r\n        // single\r\n        let currentRow = 0;\r\n        for (let i = 0; i < this.strSingle.length; i++, currentRow++) {\r\n            if (i === this.strSingle.length >> 1) {\r\n                x += width;\r\n                currentRow = 0;\r\n            }\r\n            const newNode = i ? instantiate(this.singleModeToggle) : this.singleModeToggle;\r\n            newNode.setPosition(x, y - height * currentRow, 0.0);\r\n            newNode.setScale(0.5, 0.5, 0.5);\r\n            newNode.parent = this.singleModeToggle.parent;\r\n\r\n            const textComponent = newNode.getComponentInChildren(RichText);\r\n            textComponent.string = this.strSingle[i];\r\n            this.textComponentList[this.textComponentList.length] = textComponent;\r\n            this.textContentList[this.textContentList.length] = textComponent.string;\r\n\r\n            newNode.on(Toggle.EventType.TOGGLE, this.toggleSingleMode, this);\r\n\r\n            this.singleModeToggleList[i] = newNode;\r\n        }\r\n\r\n        x += width;\r\n        // buttons\r\n        this.EnableAllCompositeModeButton.setPosition(x + 15, y, 0.0);\r\n        this.EnableAllCompositeModeButton.setScale(0.5, 0.5, 0.5);\r\n        this.EnableAllCompositeModeButton.on(Button.EventType.CLICK, this.enableAllCompositeMode, this);\r\n        this.EnableAllCompositeModeButton.parent = buttonNode;\r\n        let labelComponent = this.EnableAllCompositeModeButton.getComponentInChildren(Label);\r\n        this.labelComponentList[this.labelComponentList.length] = labelComponent;\r\n\r\n        const changeColorButton = instantiate(this.EnableAllCompositeModeButton);\r\n        changeColorButton.setPosition(x + 90, y, 0.0);\r\n        changeColorButton.setScale(0.5, 0.5, 0.5);\r\n        changeColorButton.on(Button.EventType.CLICK, this.changeTextColor, this);\r\n        changeColorButton.parent = buttonNode;\r\n        labelComponent = changeColorButton.getComponentInChildren(Label);\r\n        labelComponent.string = 'TextColor';\r\n        this.labelComponentList[this.labelComponentList.length] = labelComponent;\r\n\r\n        const HideButton = instantiate(this.EnableAllCompositeModeButton);\r\n        HideButton.setPosition(x + 200, y, 0.0);\r\n        HideButton.setScale(0.5, 0.5, 0.5);\r\n        HideButton.on(Button.EventType.CLICK, this.hideUI, this);\r\n        HideButton.parent = this.node.parent;\r\n        labelComponent = HideButton.getComponentInChildren(Label);\r\n        labelComponent.string = 'Hide UI';\r\n        this.labelComponentList[this.labelComponentList.length] = labelComponent;\r\n        this.hideButtonLabel = labelComponent;\r\n\r\n        // misc\r\n        y -= 40;\r\n        for (let i = 0; i < this.strMisc.length; i++) {\r\n            const newNode = instantiate(this.compositeModeToggle);\r\n            newNode.setPosition(x, y - height * i, 0.0);\r\n            newNode.setScale(0.5, 0.5, 0.5);\r\n            newNode.parent = miscNode;\r\n\r\n            const textComponent = newNode.getComponentInChildren(RichText);\r\n            textComponent.string = this.strMisc[i];\r\n            this.textComponentList[this.textComponentList.length] = textComponent;\r\n            this.textContentList[this.textContentList.length] = textComponent.string;\r\n\r\n            const toggleComponent = newNode.getComponent(Toggle);\r\n            toggleComponent.isChecked = i ? true : false;\r\n            newNode.on(Toggle.EventType.TOGGLE, i ? this.toggleLightingWithAlbedo : this.toggleCSMColoration, this);\r\n            this.miscModeToggleList[i] = newNode;\r\n        }\r\n\r\n        // composite\r\n        y -= 150;\r\n        for (let i = 0; i < this.strComposite.length; i++) {\r\n            const newNode = i ? instantiate(this.compositeModeToggle) : this.compositeModeToggle;\r\n            newNode.setPosition(x, y - height * i, 0.0);\r\n            newNode.setScale(0.5, 0.5, 0.5);\r\n            newNode.parent = this.compositeModeToggle.parent;\r\n\r\n            const textComponent = newNode.getComponentInChildren(RichText);\r\n            textComponent.string = this.strComposite[i];\r\n            this.textComponentList[this.textComponentList.length] = textComponent;\r\n            this.textContentList[this.textContentList.length] = textComponent.string;\r\n\r\n            newNode.on(Toggle.EventType.TOGGLE, this.toggleCompositeMode, this);\r\n\r\n            this.compositeModeToggleList[i] = newNode;\r\n        }\r\n    }\r\n\r\n    isTextMatched(textUI, textDescription) : boolean {\r\n        let tempText = new String(textUI);\r\n        const findIndex = tempText.search('>');\r\n        if (findIndex === -1) {\r\n            return textUI === textDescription;\r\n        } else {\r\n            tempText = tempText.substr(findIndex + 1);\r\n            tempText = tempText.substr(0, tempText.search('<'));\r\n            return tempText === textDescription;\r\n        }\r\n    }\r\n    toggleSingleMode(toggle: Toggle) {\r\n        const debugView = director.root!.debugView;\r\n        const textComponent = toggle.getComponentInChildren(RichText);\r\n        for (let i = 0; i < this.strSingle.length; i++) {\r\n            if (this.isTextMatched(textComponent.string, this.strSingle[i])) {\r\n                debugView.singleMode = i;\r\n            }\r\n        }\r\n    }\r\n    toggleCompositeMode(toggle: Toggle) {\r\n        const debugView = director.root!.debugView;\r\n        const textComponent = toggle.getComponentInChildren(RichText);\r\n        for (let i = 0; i < this.strComposite.length; i++) {\r\n            if (this.isTextMatched(textComponent.string, this.strComposite[i])) {\r\n                debugView.enableCompositeMode(i, toggle.isChecked);\r\n            }\r\n        }\r\n    }\r\n    toggleLightingWithAlbedo(toggle: Toggle) {\r\n        const debugView = director.root!.debugView;\r\n        debugView.lightingWithAlbedo = toggle.isChecked;\r\n    }\r\n    toggleCSMColoration(toggle: Toggle) {\r\n        const debugView = director.root!.debugView;\r\n        debugView.csmLayerColoration = toggle.isChecked;\r\n    }\r\n    enableAllCompositeMode(button: Button) {\r\n        const debugView = director.root!.debugView;\r\n        debugView.enableAllCompositeMode(true);\r\n        for (let i = 0; i < this.compositeModeToggleList.length; i++) {\r\n            const toggleComponent = this.compositeModeToggleList[i].getComponent(Toggle);\r\n            toggleComponent.isChecked = true;\r\n        }\r\n\r\n        let toggleComponent = this.miscModeToggleList[0].getComponent(Toggle);\r\n        toggleComponent.isChecked = false;\r\n        debugView.csmLayerColoration = false;\r\n        toggleComponent = this.miscModeToggleList[1].getComponent(Toggle);\r\n        toggleComponent.isChecked = true;\r\n        debugView.lightingWithAlbedo = true;\r\n    }\r\n    hideUI(button: Button) {\r\n        const titleNode = this.node.getChildByName('Titles');\r\n        const activeValue = !titleNode.active;\r\n        this.singleModeToggleList[0].parent.active = activeValue;\r\n        this.miscModeToggleList[0].parent.active = activeValue;\r\n        this.compositeModeToggleList[0].parent.active = activeValue;\r\n        this.EnableAllCompositeModeButton.parent.active = activeValue;\r\n        titleNode.active = activeValue;\r\n        this.hideButtonLabel.string = activeValue ? 'Hide UI' : 'Show UI';\r\n    }\r\n\r\n    private _currentColorIndex = 0;\r\n    private strColor: string[] = [\r\n        '<color=#ffffff>',\r\n        '<color=#000000>',\r\n        '<color=#ff0000>',\r\n        '<color=#00ff00>',\r\n        '<color=#0000ff>',\r\n    ];\r\n    private color: Color[] = [\r\n        Color.WHITE,\r\n        Color.BLACK,\r\n        Color.RED,\r\n        Color.GREEN,\r\n        Color.BLUE,\r\n    ];\r\n    changeTextColor(button: Button) {\r\n        this._currentColorIndex++;\r\n        if (this._currentColorIndex >= this.strColor.length) {\r\n            this._currentColorIndex = 0;\r\n        }\r\n        for (let i = 0; i < this.textComponentList.length; i++) {\r\n            this.textComponentList[i].string = this.strColor[this._currentColorIndex] + this.textContentList[i] + '</color>';\r\n        }\r\n        for (let i = 0; i < this.labelComponentList.length; i++) {\r\n            this.labelComponentList[i].color = this.color[this._currentColorIndex];\r\n        }\r\n    }\r\n\r\n    onLoad() {\r\n    }\r\n    update(deltaTime: number) {\r\n    }\r\n}\r\n","import { _decorator, Component, sys } from 'cc';\r\nimport { Global } from './DeviceTypeGlobal';\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('DeviceChecker')\r\nexport default class DeviceChecker extends Component {\r\n    onLoad() {\r\n        this.checkDevice();\r\n    }\r\n\r\n    checkDevice() {\r\n        if (sys.isNative) {\r\n            switch (sys.os) {\r\n                case sys.OS.IOS:\r\n                    Global.deviceType = \"iOS\";\r\n                    break;\r\n                case sys.OS.ANDROID:\r\n                    Global.deviceType = \"Android\";\r\n                    break;\r\n                default:\r\n                    Global.deviceType = \"Another native\";\r\n                    break;\r\n            }\r\n        } else {\r\n            Global.deviceType = \"Web\";\r\n        }\r\n      //  console.log(\"DeviceType:\", Global.deviceType);\r\n    }\r\n}\r\n\r\n","export const Global = {\r\n    deviceType: ''\r\n};\r\n\r\n\r\n","import { _decorator, Component, Node, Animation } from 'cc';\r\nimport { MachineCrashController } from './MachineCrashController'; // Импортируем MachineCrashController\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('GameController')\r\nexport class GameController extends Component {\r\n    @property(Node)\r\n    overlay: Node = null; // Нода overlay, присоединяемая извне\r\n\r\n    @property(Node)\r\n    button_Download: Node = null; // Нода кнопки загрузки\r\n\r\n    @property(Node)\r\n    machineNode: Node = null; // Нода Machine, присоединяемая извне\r\n\r\n    private machineCrashController: MachineCrashController = null;\r\n    private hasGameEnded: boolean = false; // Новый флаг для отслеживания состояния\r\n\r\n    start() {\r\n        // Получаем ссылку на MachineCrashController\r\n        if (this.machineNode) {\r\n            this.machineCrashController = this.machineNode.getComponent(MachineCrashController);\r\n        }\r\n    }\r\n\r\n    update() {\r\n        // Проверяем состояние isBroken в каждом кадре\r\n        if (this.machineCrashController && this.machineCrashController.isBroken && !this.hasGameEnded) {\r\n            this.gameEnd(); // Вызываем gameEnd() только если он еще не был вызван\r\n            this.hasGameEnded = true; // Устанавливаем флаг, чтобы предотвратить повторный вызов\r\n        }\r\n    }\r\n\r\n    gameEnd() {\r\n        if (this.overlay) {\r\n            this.overlay.active = true; // Активируем ноду overlay\r\n        }\r\n\r\n        const btnAnim = this.button_Download.getComponent(Animation); // Нода кнопки загрузки\r\n        btnAnim.play(\"btnDownloadDissappear\"); // Проигрываем анимацию btnDownloadDissappear\r\n    }\r\n}","import { _decorator, Component, Node, Sprite, find, Color } from 'cc';\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('EndGameOverlay')\r\nexport class EndGameOverlay extends Component {\r\n    @property(Node)\r\n    private overlayNode: Node = null; // Узел с оверлеем окончания игры\r\n\r\n    start() {\r\n        // Показываем оверлей\r\n        this.overlayNode.active = true; \r\n        }\r\n}","import { _decorator, Component, Node, Vec2, EventTouch, v2, Vec3, Sprite, Color } from 'cc';\r\nimport { MachineCrashController } from './MachineCrashController'; // убедитесь, что путь правильный\r\nimport { StartAnimationController } from './StartAnimationController'; // Импортируйте ваш контроллер анимации\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('Joystick')\r\nexport class Joystick extends Component {\r\n    @property(Node)\r\n    stick: Node = null; // Узел, представляющий рычаг джойстика\r\n\r\n    @property(Node)\r\n    machineCrashControllerNode: Node = null; // Узел, представляющий MachineCrashController\r\n\r\n    @property(Node)\r\n    nodeToRemove: Node = null; // Узел, который нужно удалить при поломке машины\r\n    @property(StartAnimationController)\r\n    startAnimationController: StartAnimationController = null;\r\n\r\n    private _startPos: Vec2 = v2(0, -120);\r\n    private _radius: number = 7; // Радиус области джойстика\r\n    private _direction: Vec2 = v2(0, 0); // Направление движения\r\n    private _stickYValue: number = -120; // Значение y стика\r\n\r\n    onLoad() {\r\n        this.node.on(Node.EventType.TOUCH_START, this.onTouchStart, this);\r\n        this.node.on(Node.EventType.TOUCH_MOVE, this.onTouchMove, this);\r\n        this.node.on(Node.EventType.TOUCH_END, this.onTouchEnd, this);\r\n        this.node.on(Node.EventType.TOUCH_CANCEL, this.onTouchEnd, this);\r\n    }\r\n\r\n    onTouchStart(event: EventTouch) {\r\n        this._startPos = event.getLocation();\r\n        //this.stick.setPosition(this.node.position); // Установка рычага в центр\r\n\r\n        if (this.startAnimationController) {\r\n\r\n            this.startAnimationController.setIsRunning(false); // Останавливаем анимацию\r\n        }\r\n    }\r\n\r\n    onTouchMove(event: EventTouch) {\r\n        const currentPos = event.getLocation();\r\n        this._direction = currentPos.subtract(this._startPos).normalize();\r\n        this._direction.x = 0; // Отключаем движение по оси X\r\n\r\n        const distance = Vec2.distance(this._startPos, currentPos);\r\n        if (distance > this._radius) {\r\n            this._direction = this._direction.multiplyScalar(this._radius);\r\n        }\r\n\r\n        const newPosition = this.node.position.add(new Vec3(this._direction.x, this._direction.y, 0));\r\n        if (newPosition.y >= 120) {\r\n            newPosition.y = 120;\r\n        }\r\n        if (newPosition.y <= -120) {\r\n            newPosition.y = -120;\r\n        }\r\n        this.stick.setPosition(newPosition);\r\n        this._stickYValue = newPosition.y;\r\n    }\r\n\r\n    onTouchEnd() {\r\n        //this.stick.setPosition(this.node.position); // Возврат рычага в центр\r\n        this._direction = v2(0, 0); // Сбрасываем направление\r\n    }\r\n\r\n    public getJoystickPercentage(): number {\r\n        const min = -120;\r\n        const max = 120;\r\n\r\n        // Получаем компонент MachineCrashController\r\n        const machineCrashController = this.machineCrashControllerNode.getComponent(MachineCrashController);\r\n        \r\n        // Проверяем состояние isBroken\r\n        if (machineCrashController && machineCrashController.isBroken) {\r\n            this.removeLeverUI(); // Удаляем указанную ноду, если isBroken\r\n            return 0; // Возвращаем 0, если машина сломана\r\n        }\r\n\r\n        const normalizedValue = (this._stickYValue - min) / (max - min);\r\n        const percentageValue = Math.round(normalizedValue * 100);\r\n        return Math.max(0, Math.min(percentageValue, 100));\r\n    }\r\n\r\n    private removeLeverUI() {\r\n        if (this.nodeToRemove) {\r\n            // Проходим по всем дочерним нодам\r\n            this.nodeToRemove.children.forEach(child => {\r\n                // Получаем компонент Sprite с явным указанием типа\r\n                const sprite = child.getComponent(Sprite) as Sprite;\r\n                if (sprite) {\r\n                    // Получаем текущий цвет\r\n                    const currentColor = sprite.color;\r\n                    // Создаем новый цвет с альфа-каналом 0\r\n                    const newColor = new Color(currentColor.r, currentColor.g, currentColor.b, 0);\r\n                    // Применяем новый цвет\r\n                    sprite.color = newColor;\r\n                }\r\n            });\r\n        }\r\n    }\r\n}","import { _decorator, Component, Node, Vec3, input, Input, EventKeyboard, KeyCode, CCFloat } from 'cc';\r\nimport { Joystick } from './Joystick'; // Импортируем класс Joystick\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('MachineController')\r\nexport class MachineController extends Component {\r\n    @property(Node)\r\n    joystickNode: Node = null; // Узел, содержащий компонент Joystick\r\n    \r\n    @property({ type: CCFloat })\r\n    private maxspeed: number = 35;\r\n\r\n    private speed: number = 0; // Постоянная скорость машины\r\n    private JoystickPercentage: number = 0; // Значение наклона джойстика\r\n    private joystick: Joystick = null;\r\n    private movingForward: boolean = false; // Флаг для отслеживания движения\r\n    private lastFrameTime: number = 0; // Время последнего кадра\r\n\r\n    onLoad() {\r\n        // Получаем компонент Joystick из узла\r\n        this.joystick = this.joystickNode.getComponent(Joystick);\r\n    }\r\n\r\n    start() {\r\n        //input.on(Input.EventType.KEY_DOWN, this.onKeyDown, this);\r\n        //input.on(Input.EventType.KEY_UP, this.onKeyUp, this);\r\n    }\r\n\r\n    update(deltaTime: number) {\r\n        // Обновляем время последнего кадра\r\n       const currentTime = performance.now();\r\n        const frameTime = currentTime - this.lastFrameTime;\r\n        this.lastFrameTime = currentTime;\r\n\r\n        if (this.joystick) {\r\n            // Вызываем публичный метод getJoystickPercentage() и получаем значение\r\n            this.JoystickPercentage = this.joystick.getJoystickPercentage();\r\n            this.movingForward = true; // Устанавливаем флаг движения\r\n            //console.log(\"Current Y value from Joystick:\", this.JoystickPercentage);\r\n        }\r\n\r\n        // Вычисляем скорость относительно наклона джойстика\r\n        this.speed = (this.maxspeed * (this.JoystickPercentage)/100);\r\n\r\n        // Вычисляем FPS\r\n        /*const fps = 1000 / frameTime;\r\n\r\n        // Вы можете использовать fps для изменения скорости или других параметров\r\n        const adjustedSpeed = this.speed * (fps / 60); // корректируем скорость в зависимости от FPS\r\n        // console.log(\"Current vehicle speed:\", adjustedSpeed);\r\n        \r\n        if (this.movingForward) {\r\n            // Изменяем позицию машины по оси X\r\n            this.node.position = this.node.position.add(new Vec3(adjustedSpeed * deltaTime, 0, 0));\r\n        }\r\n        */\r\n        if (this.movingForward) {\r\n            // Изменяем позицию машины по оси X\r\n            this.node.position = this.node.position.add(new Vec3(this.speed * deltaTime, 0, 0));\r\n        }\r\n    }\r\n/*\r\n    onKeyDown(event: EventKeyboard) {\r\n        if (event.keyCode === KeyCode.KEY_W) { // Используем 'W' для движения вперед\r\n            this.movingForward = true; // Устанавливаем флаг движения\r\n        }\r\n    }\r\n\r\n    onKeyUp(event: EventKeyboard) {\r\n        if (event.keyCode === KeyCode.KEY_W) { // Используем 'W' для остановки\r\n            this.movingForward = false; // Сбрасываем флаг движения\r\n        }\r\n    }\r\n\r\n    onDestroy() {\r\n        input.off(Input.EventType.KEY_DOWN, this.onKeyDown, this);\r\n        input.off(Input.EventType.KEY_UP, this.onKeyUp, this);\r\n    }\r\n*/\r\n}","import { _decorator, Component, Node, RigidBody, BoxCollider, Vec3, ICollisionEvent, Collider, PhysicsSystem } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('MachineCrashController')\r\nexport class MachineCrashController extends Component {\r\n    isBroken: boolean = false;\r\n\r\n    @property(Node)\r\n    public breakableNode: Node | null = null; // Нода, об которую машина будет разбиваться\r\n\r\n    onLoad() {\r\n        const collider = this.node.getComponent(BoxCollider);\r\n        if (collider) {\r\n            collider.on('onCollisionEnter', this.onCollisionEnter, this);\r\n        }\r\n    }\r\n\r\n    update(deltaTime: number) {\r\n        // Проверяем, если машина ниже -5 по оси Y\r\n        if (this.node.position.y < -5) {\r\n            this.startFalling();\r\n        }\r\n    }\r\n\r\n    private onCollisionEnter(event: ICollisionEvent) {\r\n        const other = event.otherCollider.node;\r\n\r\n        //console.log(\"Collision detected with:\", other.name);\r\n        //console.log(\"isBroken flag value:\", this.isBroken);\r\n\r\n        if (this.breakableNode && other === this.breakableNode && !this.isBroken) {\r\n            this.startFalling();\r\n        }\r\n    }\r\n\r\n    startFalling(): void {\r\n        if (this.isBroken) return;\r\n\r\n        this.isBroken = true;\r\n\r\n        const machineRigidBody = this.node.getComponent(RigidBody);\r\n        if (machineRigidBody) {\r\n            machineRigidBody.type = RigidBody.Type.DYNAMIC; // Переключаем на Dynamic\r\n        }\r\n\r\n        // Отключаем коллайдер материнского объекта\r\n        const parentCollider = this.node.getComponent(Collider);\r\n        if (parentCollider) {\r\n            parentCollider.enabled = false; // Отключаем коллайдер\r\n        }\r\n\r\n        // Активируем коллайдеры у дочерних элементов и устанавливаем RigidBody\r\n        this.node.children.forEach((child) => {\r\n            const colliders = child.getComponents(Collider);\r\n            colliders.forEach((collider) => {\r\n                collider.enabled = true; // Включаем коллайдер\r\n            });\r\n\r\n            let childRigidBody = child.getComponent(RigidBody);\r\n            if (!childRigidBody) {\r\n                childRigidBody = child.addComponent(RigidBody);\r\n            }\r\n            childRigidBody.isDynamic = true;\r\n            childRigidBody.mass = 100 / this.node.children.length; // Обновляем массу для каждого дочернего элемента\r\n        });\r\n\r\n        // Применяем импульс к машине\r\n        if (machineRigidBody) {\r\n            machineRigidBody.applyImpulse(new Vec3(10, -2, 0)); // Измененные значения\r\n        }\r\n    }\r\n}","import { _decorator, Component, tween, Vec3, Node } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('RotationController')\r\nexport class RotateNode extends Component {\r\n    @property\r\n    rotationSpeedCoefficient: number = 1; // Коэффициент скорости вращения\r\n\r\n    @property\r\n    rotationX: number = 1; // выбранная ось вращения\r\n    @property\r\n    rotationY: number = 0; // выбранная ось вращения\r\n    @property\r\n    rotationZ: number = 0; // выбранная ось вращения\r\n\r\n    @property(Node) // Предполагаем, что Joystick - это Node\r\n    joystickNode: Node = null; // Узел джойстика\r\n\r\n    private joystick: any; // Ссылка на экземпляр Joystick\r\n    public JoystickPercentage: number = 0; // Переменная для хранения значения джойстика\r\n\r\n    start() {\r\n        this.joystick = this.joystickNode.getComponent('Joystick'); // Получаем компонент Joystick\r\n    }\r\n\r\n    update(deltaTime: number) {\r\n        // Получаем значение JoystickPercentage\r\n        if (this.joystick) {\r\n            this.JoystickPercentage = this.joystick.getJoystickPercentage();\r\n        }\r\n\r\n        // Проверяем, если JoystickPercentage ненулевое\r\n        if (this.JoystickPercentage !== 0) {\r\n            this.rotateNode(); // Запускаем вращение\r\n        }\r\n    }\r\n\r\n    rotateNode() {\r\n        // Рассчитываем скорость вращения\r\n        const actualRotationSpeed = this.rotationSpeedCoefficient * this.JoystickPercentage / 10;\r\n\r\n        // Создаем анимацию вращения\r\n        tween(this.node)\r\n            .to(1, { eulerAngles: new Vec3(\r\n                this.node.eulerAngles.x + (360 * this.rotationX * actualRotationSpeed),\r\n                this.node.eulerAngles.y + (360 * this.rotationY * actualRotationSpeed),\r\n                this.node.eulerAngles.z + (360 * this.rotationZ * actualRotationSpeed)\r\n            ) }) // Вращение на 360 градусов с учетом скорости\r\n            .call(() => {\r\n                // После завершения анимации запускаем её снова\r\n                this.rotateNode();\r\n            })\r\n            .start();\r\n    }\r\n}","import { _decorator, Component, Animation, Node, EventTouch } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('StartAnimationController')\r\nexport class StartAnimationController extends Component {\r\n    @property(Node) handNode: Node = null; // Узел Hand\r\n    @property(Node) draggableNode: Node = null; // Узел Draggable\r\n\r\n    private animationComponentHand: Animation = null;\r\n    private animationComponentDraggable: Animation = null;\r\n\r\n    private isRunning: boolean = true;\r\n    private animationStopped = false;\r\n    private isLeverPositionChangePlaying: boolean = false; // Флаг для отслеживания состояния анимации\r\n\r\n    start() {\r\n        this.animationComponentHand = this.handNode.getComponent(Animation);\r\n        this.animationComponentDraggable = this.draggableNode.getComponent(Animation);\r\n        this.runAnimations();\r\n    }\r\n\r\n    private async runAnimations() {\r\n        while (this.isRunning) {\r\n            await this.playAnimation(this.animationComponentHand, 'HandOpacityChange');\r\n            await Promise.all([\r\n                this.playAnimation(this.animationComponentHand, 'HandPositionChange'),\r\n                this.playAnimation(this.animationComponentDraggable, 'LeverPositionChange')\r\n            ]);\r\n        }\r\n    }\r\n\r\n    private playAnimation(animationComponent: Animation, animationName: string): Promise<void> {\r\n        return new Promise((resolve) => {\r\n            animationComponent.play(animationName);\r\n            if (animationName === 'LeverPositionChange') {\r\n                this.isLeverPositionChangePlaying = true; // Устанавливаем флаг\r\n            }\r\n            animationComponent.once(Animation.EventType.FINISHED, () => {\r\n                if (animationName === 'LeverPositionChange') {\r\n                    this.isLeverPositionChangePlaying = false; // Сбрасываем флаг\r\n                }\r\n                resolve();\r\n            });\r\n        });\r\n    }\r\n\r\n    // Публичный метод для обработки касания\r\n    public handleTouchStart(event: EventTouch) {\r\n        // Здесь можно оставить логику, если нужно\r\n    }\r\n\r\n    // Внутренний метод для остановки анимации при касании\r\n    private stopAnimationOnTouch(event: EventTouch) {\r\n        this.isRunning = false;\r\n        if(this.animationStopped){\r\n            return\r\n        }\r\n\r\n        if (this.handNode) {\r\n            this.handNode.destroy(); // Удаляем узел Hand\r\n        }\r\n\r\n        // Возвращаем lever на позицию y = -120\r\n        if (this.draggableNode) {\r\n            this.draggableNode.setPosition(this.draggableNode.position.x, -120, this.draggableNode.position.z);\r\n        }\r\n\r\n        // Останавливаем анимацию LeverPositionChange, если она воспроизводится\r\n        if (this.isLeverPositionChangePlaying && this.animationComponentDraggable) {\r\n            this.animationComponentDraggable.stop(); // Останавливаем только LeverPositionChange\r\n        }\r\n    }\r\n\r\n    // Метод для изменения значения isRunning\r\n    public setIsRunning(value: boolean) {\r\n        this.isRunning = value;\r\n        this.stopAnimationOnTouch(null);\r\n        this.animationStopped = true;\r\n    }\r\n}"]}